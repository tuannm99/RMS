
@startuml authClass
!theme reddress-lightblue

skinparam classAttributeIconSize 0
class chart.controller{
    - {field} chartService: object

    + {method} countJobByDepartment(req: express.Request, res: express.Response): void
    + {method} countSex(req: express.Request, res: express.Response): void
    + {method} countCandidate(req: express.Request, res: express.Response): void
    + {method} countCandidateApproved(req: express.Request, res: express.Response): void
    + {method} countCandidateRejected(req: express.Request, res: express.Response): void
}

class chart.service{
    + {method} countJobByDepartment(): Number
    + {method} countSex(): Number
    + {method} countCandidate(): Number
    + {method} countCandidateApproved(): Number
    + {method} countCandidateRejected(): Number
}

class chart.router{
    + {field} router: express.Router
}

class schema.User {
  + {field} username: String
  + {field} password: String
  + {field} email: String 
  + {field} sex: enum
  + {field} firstName: String 
  + {field} midName: String
  + {field} lastName: String 
  + {field} fullName: String 
  + {field} unsignedFullName: String
  + {field} phone: String
  + {field} address: String
  + {field} dateOfBirth: Date
  + {field} languages: String
  + {field} maritalStatus: String
  + {field} role: enum
  + {field} jobStatus: Object
  + {field} createdAt: Date
  + {field} updatedAt: Date

  + {method} isUsernameTaken: Boolean
  + {method} isEmailTaken: Boolean
  + {method} isPasswordMatch: Boolean
  + {method} isPasswordMatch: Boolean
}

class schema.Candidate {
    + {field} jobId: ObjectId
    + {field} interviewId: [ObjectId]
    + {field} status: String
    + {field} stage:  String
    + {field} firstName:  String 
    + {field} midName: String
    + {field} lastName:  String 
    + {field} fullName: String 
    + {field} unsignedFullName:  String
    + {field} email:  String
    + {field} phone:  String
    + {field} sex: enum 
    + {field} referral: String 
    + {field} cv: Object
    + {field} hyperlink: String 
    + {field} employer: Object
    + {field} education: Object
    + {field} createdAt:  Date
    + {field} updatedAt: Date
}

class schema.Job {
    + {field} userId: ObjectId
    + {field} candidateId: [ObjectId]
    + {field} title: String
    + {field} unsignedTitle: String
    + {field} status:  enum 
    + {field} department: enum
    + {field} jobType:  String 
    + {field} location: String 
    + {field} jobDescription:  String
    + {field} jobDescription: String
    + {field} shortDes: String
    + {field} skill: String
    + {field} experience: String
    + {field} minSalary: Number
    + {field} maxSalary: Number
    + {field} currency: String
    + {field} createdAt: Date
    + {field} updatedAt: Date
}

chart.router ..> chart.controller
chart.controller ..> chart.service
chart.service ..> schema.User
chart.service ..> schema.Candidate
chart.service ..> schema.Job
@enduml